[{"path":"http://liu-chao.site/Goodreader/articles/Intro_to_Goodreader.html","id":"installing-and-loading-the-package","dir":"Articles","previous_headings":"","what":"Installing and loading the package","title":"Goodreader Quick Start Guide","text":"Install package: load package:","code":"install.packages(\"Goodreader\") library(Goodreader)"},{"path":"http://liu-chao.site/Goodreader/articles/Intro_to_Goodreader.html","id":"searching-for-books-on-goodreads","dir":"Articles","previous_headings":"","what":"Searching for Books on Goodreads","title":"Goodreader Quick Start Guide","text":"search_goodreads() function allows search books Goodreads based various criteria. code searches books include term “parenting” title returned 10 books sorted readers’ ratings can also search author’s name: search_goodreads() function includes sort_by sorts results either ratings published_year:","code":"parent_df <- search_goodreads(search_term = \"parenting\", search_in = \"title\", num_books = 10, sort_by = \"ratings\") summary(parent_df) ##   title              author            book_id          ## Length:10          Length:10          Length:10          ## Class :character   Class :character   Class :character   ## Mode  :character   Mode  :character   Mode  :character    ##     url               ratings      ## Length:10          Min.   : 8427   ## Class :character   1st Qu.:11744   ## Mode  :character   Median :13662   ##                    Mean   :19757   ##                    3rd Qu.:13784   ##                    Max.   :69591 search_goodreads(search_term = \"J.K. Rowling\", search_in = \"author\", num_books = 5, sort_by = \"ratings\") search_goodreads(search_term = \"J.K. Rowling\", search_in = \"author\", num_books = 5, sort_by = \"published_year\")"},{"path":"http://liu-chao.site/Goodreader/articles/Intro_to_Goodreader.html","id":"scrape-book-metadata-and-reviews","dir":"Articles","previous_headings":"","what":"Scrape book metadata and reviews","title":"Goodreader Quick Start Guide","text":"books found, save IDs text file. IDs used extracting book metadata reviews: Book metadata can scraped: speed scraping process: Turn parallel process: use_parallel = TRUE Specify number cores parallel process (e.g., `num_cores = 8)","code":"get_book_ids(input_data = parent_df, file_name = \"parent_books.txt\") #the book IDs are now stored in a text file named “parent_books” parent_bookinfo <- scrape_books(book_ids_path = \"parent_books.txt\", use_parallel = FALSE) parent_bookreviews <- scrape_reviews(book_ids_path = \"parent_books.txt\", num_reviews = 10, use_parallel = FALSE) #users can also turn on parallel process to speed up the process"},{"path":"http://liu-chao.site/Goodreader/articles/Intro_to_Goodreader.html","id":"conduct-sentiment-analysis","dir":"Articles","previous_headings":"","what":"Conduct sentiment analysis","title":"Goodreader Quick Start Guide","text":"analyze_sentiment() function calculates sentiment score review based lexicon chosen user. Available options lexicon afinn, bing, nrc. Basic negation scope detection implemented (e.g., happy labeled negative emotion assigned negative score). average_book_sentiment() function calculates average sentiment score book. sentiment scores can plotted histogram:  trend average sentiment score time:","code":"sentiment_results <- analyze_sentiment(parent_bookreviews, lexicon = \"afinn\") ave_sentiment <- average_book_sentiment(sentiment_results) summary(ave_sentiment) #>    book_id          avg_sentiment   #>  Length:10          Min.   : 4.40   #>  Class :character   1st Qu.: 7.25   #>  Mode  :character   Median :12.86   #>                     Mean   :12.95   #>                     3rd Qu.:14.65   #>                     Max.   :27.30 sentiment_histogram(sentiment_results) sentiment_trend(sentiment_results, time_period = \"year\")"},{"path":"http://liu-chao.site/Goodreader/articles/Intro_to_Goodreader.html","id":"perform-topic-modeling","dir":"Articles","previous_headings":"","what":"Perform topic modeling","title":"Goodreader Quick Start Guide","text":"Apply topic modeling reviews data: Plot top terms topic:  Create word cloud topic: Topic 1: Topic 2: Topic 3:","code":"reviews_topic <- model_topics(parent_bookreviews, num_topics = 3, num_terms = 10, english_only = TRUE) #> Topic 1:   #> child, emot, children, feel, help, famili, work, can, time, like  #>  #> Topic 2:   #> parent, book, kid, read, just, think, say, dont, mani, want  #>  #> Topic 3:   #> book, parent, children, need, good, author, one, like, way, give plot_topic_terms(reviews_topic) gen_topic_clouds(reviews_topic)"},{"path":"http://liu-chao.site/Goodreader/articles/Intro_to_Goodreader.html","id":"other-utility-functions","dir":"Articles","previous_headings":"","what":"Other utility functions","title":"Goodreader Quick Start Guide","text":"following table shows utility functions extract book-related information","code":""},{"path":"http://liu-chao.site/Goodreader/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chao Liu. Author, maintainer, copyright holder.","code":""},{"path":"http://liu-chao.site/Goodreader/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chao Liu (2024). Goodreader: Scrape Analyze 'Goodreads' Book Data. R package version 0.1.1, http://liu-chao.site/Goodreader/, https://github.com/chaoliu-cl/Goodreader.","code":"@Manual{,   title = {Goodreader: Scrape and Analyze 'Goodreads' Book Data},   author = {{Chao Liu}},   year = {2024},   note = {R package version 0.1.1, http://liu-chao.site/Goodreader/},   url = {https://github.com/chaoliu-cl/Goodreader}, }"},{"path":"http://liu-chao.site/Goodreader/index.html","id":"goodreader-","dir":"","previous_headings":"","what":"Scrape and Analyze Goodreads Book Data","title":"Scrape and Analyze Goodreads Book Data","text":"Goodreader comprehensive toolkit scraping analyzing book data Goodreads.","code":""},{"path":"http://liu-chao.site/Goodreader/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Scrape and Analyze Goodreads Book Data","text":"CRAN:","code":"install.packages(\"Goodreader\")"},{"path":"http://liu-chao.site/Goodreader/index.html","id":"use-goodreader","dir":"","previous_headings":"","what":"Use Goodreader","title":"Scrape and Analyze Goodreads Book Data","text":"","code":"#load the package library(Goodreader)  #Search for books AI_df <- search_goodreads(search_term = \"artificial intelligence\", search_in = \"title\", num_books = 10, sort_by = \"ratings\")  #Retrieve Book IDs and save them into a text file get_book_ids(input_data = AI_df, file_name = \"AI_books.txt\")  #Get book-related information scrape_books(book_ids_path = \"AI_books.txt\")  #Scrape book reviews scrape_reviews(book_ids_path = \"AI_books.txt\", num_reviews = 10)"},{"path":"http://liu-chao.site/Goodreader/reference/analyze_sentiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform sentiment analysis on book reviews with negation handling — analyze_sentiment","title":"Perform sentiment analysis on book reviews with negation handling — analyze_sentiment","text":"function takes output scrape_reviews performs sentiment analysis, including basic negation scope detection.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/analyze_sentiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform sentiment analysis on book reviews with negation handling — analyze_sentiment","text":"","code":"analyze_sentiment(reviews_df, lexicon = \"afinn\")"},{"path":"http://liu-chao.site/Goodreader/reference/analyze_sentiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform sentiment analysis on book reviews with negation handling — analyze_sentiment","text":"reviews_df data frame containing output scrape_reviews. lexicon sentiment lexicon use. Options \"afinn\", \"bing\", \"nrc\".","code":""},{"path":"http://liu-chao.site/Goodreader/reference/analyze_sentiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform sentiment analysis on book reviews with negation handling — analyze_sentiment","text":"data frame sentiment scores review.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/analyze_sentiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform sentiment analysis on book reviews with negation handling — analyze_sentiment","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Run the scrape_reviews function reviews <- scrape_reviews(temp_file, num_reviews = 5, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:15:17.520288 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 7.43408608436584 #> Total books processed: 3  # Check if reviews were successfully scraped if (nrow(reviews) > 0) {   # Perform sentiment analysis   sentiment_results <- analyze_sentiment(reviews, lexicon = \"afinn\")    # Display the first few rows of the results   print(head(sentiment_results)) } else {   cat(\"No reviews found. Cannot perform sentiment analysis.\\n\") } #> # A tibble: 6 × 9 #>   book_id reviewer_id reviewer_name review_content            reviewer_followers #>   <chr>   <chr>       <chr>         <chr>                                  <dbl> #> 1 1420    91434473    daph pink ♡   \"if you don't ship Hamra…                  3 #> 2 1420    83582       Bill Kerwin   \"I don't have any earth-…                 NA #> 3 1420    44531801    Nayra.Hassan  \"متردد في قراءة هاملت..س…                  6 #> 4 1420    416390      Paul Bryant   \"The Skinhead Hamlet - S…                 11 #> 5 1420    10171516    jessica       \"shakespeare when pitchi…                 44 #> 6 2767052 3672777     Nataliya      \"Suzanne Collins has bal…                 14 #> # ℹ 4 more variables: reviewer_total_reviews <dbl>, review_date <chr>, #> #   review_rating <dbl>, sentiment_score <dbl>  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/average_book_sentiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate average sentiment score per book — average_book_sentiment","title":"Calculate average sentiment score per book — average_book_sentiment","text":"function calculates average sentiment score book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/average_book_sentiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate average sentiment score per book — average_book_sentiment","text":"","code":"average_book_sentiment(sentiment_df)"},{"path":"http://liu-chao.site/Goodreader/reference/average_book_sentiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate average sentiment score per book — average_book_sentiment","text":"sentiment_df data frame containing output analyze_sentiment.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/average_book_sentiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate average sentiment score per book — average_book_sentiment","text":"data frame average sentiment scores book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/average_book_sentiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate average sentiment score per book — average_book_sentiment","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Run the scrape_reviews function reviews <- scrape_reviews(temp_file, num_reviews = 5, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:15:27.212047 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 9.39320826530457 #> Total books processed: 3  # Check if reviews were successfully scraped if (nrow(reviews) > 0) {   # Perform sentiment analysis   sentiment_results <- analyze_sentiment(reviews, lexicon = \"afinn\")    # Calculate average sentiment score per book   avg_senti <- average_book_sentiment(sentiment_results)    # Display the results   print(avg_senti) } else {   cat(\"No reviews found. Cannot calculate average sentiment.\\n\") } #> # A tibble: 3 × 2 #>   book_id avg_sentiment #>   <chr>           <dbl> #> 1 10210            55.4 #> 2 1420            -72.7 #> 3 2767052          23.2  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/fit_lda.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform topic modeling on preprocessed reviews — fit_lda","title":"Perform topic modeling on preprocessed reviews — fit_lda","text":"function performs LDA topic modeling preprocessed reviews.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/fit_lda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform topic modeling on preprocessed reviews — fit_lda","text":"","code":"fit_lda(dtm, k, method = \"Gibbs\")"},{"path":"http://liu-chao.site/Goodreader/reference/fit_lda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform topic modeling on preprocessed reviews — fit_lda","text":"dtm document-term matrix k number topics extract method method use fitting model (default: Gibbs)","code":""},{"path":"http://liu-chao.site/Goodreader/reference/fit_lda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform topic modeling on preprocessed reviews — fit_lda","text":"LDA model","code":""},{"path":"http://liu-chao.site/Goodreader/reference/fit_lda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform topic modeling on preprocessed reviews — fit_lda","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Scrape reviews reviews <- scrape_reviews(temp_file, num_reviews = 5, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:15:38.029445 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 10.6053116321564 #> Total books processed: 3  # Preprocess the reviews preprocessed <- preprocess_reviews(reviews, english_only = TRUE)  # Fit LDA model lda_model <- fit_lda(preprocessed$dtm, k = 2)  # Print model summary print(lda_model) #> A LDA_Gibbs topic model with 2 topics.  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/gen_topic_clouds.html","id":null,"dir":"Reference","previous_headings":"","what":"Create word cloud for topics — gen_topic_clouds","title":"Create word cloud for topics — gen_topic_clouds","text":"function creates word cloud topic.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/gen_topic_clouds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create word cloud for topics — gen_topic_clouds","text":"","code":"gen_topic_clouds(model_output, n = 50)"},{"path":"http://liu-chao.site/Goodreader/reference/gen_topic_clouds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create word cloud for topics — gen_topic_clouds","text":"model_output output model_topics function n number top terms include word cloud","code":""},{"path":"http://liu-chao.site/Goodreader/reference/gen_topic_clouds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create word cloud for topics — gen_topic_clouds","text":"list ggplot objects, element represents word cloud topic.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/gen_topic_clouds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create word cloud for topics — gen_topic_clouds","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Scrape reviews reviews <- scrape_reviews(temp_file, num_reviews = 30, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:15:45.295685 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 6.78074383735657 #> Total books processed: 3  # Model topics topic_results <- model_topics(reviews, num_topics = 3, num_terms = 50, english_only = TRUE) #> Topic 1:   #> book, like, katniss, one, will, think, just, can, read, game, peopl, ’s, also, see, get, make, way, stori, first, never, mani, hunger, want, peeta, even, much, thing, time, now, say, still, live, love, take, ever, review, come, littl, charact, start, girl, person, thought, someth, ’m, world, district, show, realli, two  #>  #> Topic 2:   #> jane, love, life, rochest, stori, eyr, time, reader, much, world, make, woman, women, bront, book, feel, beauti, word, though, natur, everi, say, novel, write, cours, men, right, marri, john, let, way, might, school, take, god, independ, differ, truli, wife, even, need, young, friend, point, classic, heart, first, eye, charlott, later  #>  #> Topic 3:   #> hamlet, know, read, play, charact, one, fuck, year, seem, well, love, shakespear, claudius, plot, great, man, scene, work, find, good, reason, time, feel, realli, fact, –, princ, act, must, yes, probabl, end, get, right, idea, rather, away, ophelia, everi, real, just, look, age, chang, horatio, old, moment, mad, matter, die  #>   # Generate word clouds for each topic wordcloud_plots <- gen_topic_clouds(topic_results, n = 20)  # Display the word cloud for the first topic if (interactive()) {   print(wordcloud_plots[[1]]) }  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/get_author_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Author Information from Goodreads — get_author_info","title":"Get Author Information from Goodreads — get_author_info","text":"function takes file path containing Goodreads book IDs retrieves author information book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_author_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Author Information from Goodreads — get_author_info","text":"","code":"get_author_info(file_path)"},{"path":"http://liu-chao.site/Goodreader/reference/get_author_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Author Information from Goodreads — get_author_info","text":"file_path character string specifying path file containing Goodreads book IDs.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_author_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Author Information from Goodreads — get_author_info","text":"named list element contains author information book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_author_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Author Information from Goodreads — get_author_info","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file) # Run the function author_info <- get_author_info(temp_file) print(author_info) #> $`1420` #> {html_node} #> <a class=\"ContributorLink\" href=\"https://www.goodreads.com/author/show/947.William_Shakespeare\"> #> [1] <span class=\"ContributorLink__name\" data-testid=\"name\">William Shakespear ... #>  #> $`2767052` #> {html_node} #> <a class=\"ContributorLink\" href=\"https://www.goodreads.com/author/show/153394.Suzanne_Collins\"> #> [1] <span class=\"ContributorLink__name\" data-testid=\"name\">Suzanne Collins<\/s ... #>  #> $`10210` #> {html_node} #> <a class=\"ContributorLink\" href=\"https://www.goodreads.com/author/show/1036615.Charlotte_Bront_\"> #> [1] <span class=\"ContributorLink__name\" data-testid=\"name\">Charlotte Brontë<\/ ... #>  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/get_book_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Book IDs to a Text File — get_book_ids","title":"Save Book IDs to a Text File — get_book_ids","text":"function retrieves book_id values input_data saves specified text file.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_book_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Book IDs to a Text File — get_book_ids","text":"","code":"get_book_ids(input_data, file_name)"},{"path":"http://liu-chao.site/Goodreader/reference/get_book_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Book IDs to a Text File — get_book_ids","text":"input_data data frame containing column named book_id. file_name string specifying name text file save book_id values.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_book_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save Book IDs to a Text File — get_book_ids","text":"return value, function writes book_id values text file.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_book_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save Book IDs to a Text File — get_book_ids","text":"","code":"# Create sample data books <- data.frame(title = c(\"Hamlet\", \"The Hunger Games\", \"Jane Eyre\"),                     book_id = c(\"1420\", \"2767052\", \"10210\")                     ) # Create a temporary file path temp_file <- file.path(tempdir(), \"bookids.txt\")  # Run the function get_book_ids(books, temp_file) #> Book IDs saved to /tmp/RtmpddUdt1/bookids.txt  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE"},{"path":"http://liu-chao.site/Goodreader/reference/get_book_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Book Summary from Goodreads — get_book_summary","title":"Get Book Summary from Goodreads — get_book_summary","text":"function takes file path containing Goodreads book IDs retrieves summary book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_book_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Book Summary from Goodreads — get_book_summary","text":"","code":"get_book_summary(file_path)"},{"path":"http://liu-chao.site/Goodreader/reference/get_book_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Book Summary from Goodreads — get_book_summary","text":"file_path character string specifying path file containing Goodreads book IDs.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_book_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Book Summary from Goodreads — get_book_summary","text":"named list element contains summary book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_book_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Book Summary from Goodreads — get_book_summary","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file) # Run the function book_summary <- get_book_summary(temp_file) print(book_summary) #> $`1420` #> [1] \"Among Shakespeare's plays, \\\"Hamlet\\\" is considered by many his masterpiece. Among actors, the role of Hamlet, Prince of Denmark, is considered the jewel in the crown of a triumphant theatrical career. Now Kenneth Branagh plays the leading role and co-directs a brillant ensemble performance. Three generations of legendary leading actors, many of whom first assembled for the Oscar-winning film \\\"Henry V\\\", gather here to perform the rarely heard complete version of the play. This clear, subtly nuanced, stunning dramatization, presented by The Renaissance Theatre Company in association with \\\"Bbc\\\" Broadcasting, features such luminaries as Sir John Gielgud, Derek Jacobi, Emma Thompson and Christopher Ravenscroft. It combines a full cast with stirring music and sound effects to bring this magnificent Shakespearen classic vividly to life. Revealing new riches with each listening, this production of \\\"Hamlet\\\" is an invaluable aid for students, teachers and all true lovers of Shakespeare - a recording to be treasured for decades to come.\" #>  #> $`2767052` #> [1] \"Could you survive on your own in the wild, with every one out to make sure you don't live to see the morning?In the ruins of a place once known as North America lies the nation of Panem, a shining Capitol surrounded by twelve outlying districts. The Capitol is harsh and cruel and keeps the districts in line by forcing them all to send one boy and one girl between the ages of twelve and eighteen to participate in the annual Hunger Games, a fight to the death on live TV.Sixteen-year-old Katniss Everdeen, who lives alone with her mother and younger sister, regards it as a death sentence when she steps forward to take her sister's place in the Games. But Katniss has been close to dead before—and survival, for her, is second nature. Without really meaning to, she becomes a contender. But if she is to win, she will have to start making choices that weight survival against humanity and life against love.\" #>  #> $`10210` #> [1] \"Alternate editions can be found here and here.A gothic masterpiece of tempestuous passions and dark secrets, Charlotte Brontë's Jane Eyre is edited with an introduction and notes by Stevie Davis in Penguin Classics.Charlotte Brontë tells the story of orphaned Jane Eyre, who grows up in the home of her heartless aunt, enduring loneliness and cruelty. This troubled childhood strengthens Jane's natural independence and spirit - which prove necessary when she finds employment as a governess to the young ward of Byronic, brooding Mr Rochester. As her feelings for Rochester develop, Jane gradually uncovers Thornfield Hall's terrible secret, forcing her to make a choice. Should she stay with Rochester and live with the consequences, or follow her convictions - even if it means leaving the man she loves? A novel of intense power and intrigue, Jane Eyre dazzled readers with its passionate depiction of a woman's search for equality and freedom.\" #>  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/get_format_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Format Information from Goodreads — get_format_info","title":"Get Format Information from Goodreads — get_format_info","text":"function takes file path containing Goodreads book IDs retrieves format information book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_format_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Format Information from Goodreads — get_format_info","text":"","code":"get_format_info(file_path)"},{"path":"http://liu-chao.site/Goodreader/reference/get_format_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Format Information from Goodreads — get_format_info","text":"file_path character string specifying path file containing Goodreads book IDs.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_format_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Format Information from Goodreads — get_format_info","text":"named list element contains format information book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_format_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Format Information from Goodreads — get_format_info","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Run the function format_info <- get_format_info(temp_file) print(format_info) #> $`1420` #> [1] \"289 pages, Paperback\" #>  #> $`2767052` #> [1] \"374 pages, Hardcover\" #>  #> $`10210` #> [1] \"532 pages, Paperback\" #>   # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/get_genres.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Genres for Books from Goodreads — get_genres","title":"Get Genres for Books from Goodreads — get_genres","text":"function reads book IDs file, fetches corresponding Goodreads pages, extracts genres book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_genres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Genres for Books from Goodreads — get_genres","text":"","code":"get_genres(file_path)"},{"path":"http://liu-chao.site/Goodreader/reference/get_genres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Genres for Books from Goodreads — get_genres","text":"file_path character string specifying path file containing book IDs.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_genres.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Genres for Books from Goodreads — get_genres","text":"named list element corresponds book ID contains character vector genres book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_genres.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Genres for Books from Goodreads — get_genres","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Run the function genres <- get_genres(temp_file)  # Display the results print(genres) #> $`1420` #> character(0) #>  #> $`2767052` #> character(0) #>  #> $`10210` #> character(0) #>   # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/get_num_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Number of Pages from Goodreads — get_num_pages","title":"Get Number of Pages from Goodreads — get_num_pages","text":"function takes file path containing Goodreads book IDs retrieves number pages book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_num_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Number of Pages from Goodreads — get_num_pages","text":"","code":"get_num_pages(file_path)"},{"path":"http://liu-chao.site/Goodreader/reference/get_num_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Number of Pages from Goodreads — get_num_pages","text":"file_path character string specifying path file containing Goodreads book IDs.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_num_pages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Number of Pages from Goodreads — get_num_pages","text":"named list element contains number pages book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_num_pages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Number of Pages from Goodreads — get_num_pages","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file) # Run the function num_pages <- get_num_pages(temp_file) print(num_pages) #> $`1420` #> [1] \"289\" #>  #> $`2767052` #> [1] \"374\" #>  #> $`10210` #> [1] \"532\" #>  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/get_published_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Published Time from Goodreads — get_published_time","title":"Get Published Time from Goodreads — get_published_time","text":"function takes file path containing Goodreads book IDs retrieves published time book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_published_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Published Time from Goodreads — get_published_time","text":"","code":"get_published_time(file_path)"},{"path":"http://liu-chao.site/Goodreader/reference/get_published_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Published Time from Goodreads — get_published_time","text":"file_path character string specifying path file containing Goodreads book IDs.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_published_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Published Time from Goodreads — get_published_time","text":"named list element contains book information book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_published_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Published Time from Goodreads — get_published_time","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file) # Run the function published_times <- get_published_time(temp_file) print(published_times) #> $`1420` #> [1] \"First published January 1, 1601\" #>  #> $`2767052` #> [1] \"First published September 14, 2008\" #>  #> $`10210` #> [1] \"First published October 16, 1847\" #>  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/get_rating_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Rating Distribution from Goodreads — get_rating_distribution","title":"Get Rating Distribution from Goodreads — get_rating_distribution","text":"function takes file path containing Goodreads book IDs retrieves rating distribution book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_rating_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Rating Distribution from Goodreads — get_rating_distribution","text":"","code":"get_rating_distribution(file_path)"},{"path":"http://liu-chao.site/Goodreader/reference/get_rating_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Rating Distribution from Goodreads — get_rating_distribution","text":"file_path character string specifying path file containing Goodreads book IDs.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_rating_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Rating Distribution from Goodreads — get_rating_distribution","text":"named list element contains rating distribution book.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/get_rating_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Rating Distribution from Goodreads — get_rating_distribution","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Run the function rating_distributions <- get_rating_distribution(temp_file) print(rating_distributions) #> $`1420` #> $`1420`$`5` #> [1] \"378727\" #>  #> $`1420`$`4` #> [1] \"330018\" #>  #> $`1420`$`3` #> [1] \"195852\" #>  #> $`1420`$`2` #> [1] \"53043\" #>  #> $`1420`$`1` #> [1] \"18002\" #>  #>  #> $`2767052` #> $`2767052`$`5` #> [1] \"4846692\" #>  #> $`2767052`$`4` #> [1] \"2713313\" #>  #> $`2767052`$`3` #> [1] \"1014588\" #>  #> $`2767052`$`2` #> [1] \"224700\" #>  #> $`2767052`$`1` #> [1] \"123286\" #>  #>  #> $`10210` #> $`10210`$`5` #> [1] \"996690\" #>  #> $`10210`$`4` #> [1] \"662611\" #>  #> $`10210`$`3` #> [1] \"328467\" #>  #> $`10210`$`2` #> [1] \"95870\" #>  #> $`10210`$`1` #> [1] \"51851\" #>  #>   # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/model_topics.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze topics in Goodreads reviews — model_topics","title":"Analyze topics in Goodreads reviews — model_topics","text":"function takes output scrape_reviews, preprocesses data, performs topic modeling, prints results.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/model_topics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze topics in Goodreads reviews — model_topics","text":"","code":"model_topics(reviews, num_topics = 3, num_terms = 10, english_only = TRUE)"},{"path":"http://liu-chao.site/Goodreader/reference/model_topics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze topics in Goodreads reviews — model_topics","text":"reviews data frame containing scraped reviews num_topics number topics extract num_terms number top terms display topic english_only logical value indicating whether filter non-English reviews. Default FALSE.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/model_topics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze topics in Goodreads reviews — model_topics","text":"list containing following elements: model: fitted LDA model object. filtered_reviews: preprocessed filtered reviews data frame.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/model_topics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze topics in Goodreads reviews — model_topics","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Scrape reviews reviews <- scrape_reviews(temp_file, num_reviews = 5, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:16:23.379464 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 7.55955243110657 #> Total books processed: 3  # Model topics topic_results <- model_topics(reviews, num_topics = 2, num_terms = 5, english_only = TRUE) #> Topic 1:   #> fuck, hamlet, just, like, get  #>  #> Topic 2:   #> love, jane, book, read, rochest  #>   # Print model summary print(topic_results$model) #> A LDA_Gibbs topic model with 2 topics.  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize topic distribution — plot_topic_heatmap","title":"Visualize topic distribution — plot_topic_heatmap","text":"function creates heatmap topic distribution across documents.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize topic distribution — plot_topic_heatmap","text":"","code":"plot_topic_heatmap(model_output)"},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize topic distribution — plot_topic_heatmap","text":"model_output output model_topics function","code":""},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize topic distribution — plot_topic_heatmap","text":"ggplot object representing topic distribution heatmap.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize topic distribution — plot_topic_heatmap","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Scrape reviews reviews <- scrape_reviews(temp_file, num_reviews = 10, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:16:34.294255 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 10.4321348667145 #> Total books processed: 3  # Model topics topic_results <- model_topics(reviews, num_topics = 2, num_terms = 5, english_only = TRUE) #> Topic 1:   #> fuck, hamlet, just, katniss, watch  #>  #> Topic 2:   #> love, jane, book, time, read  #>   # Visualize topic distribution plot_topic_heatmap(topic_results)   # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_prevalence.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize topic prevalence — plot_topic_prevalence","title":"Visualize topic prevalence — plot_topic_prevalence","text":"function creates bar plot overall prevalence topic.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_prevalence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize topic prevalence — plot_topic_prevalence","text":"","code":"plot_topic_prevalence(model_output)"},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_prevalence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize topic prevalence — plot_topic_prevalence","text":"model_output output model_topics function","code":""},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_prevalence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize topic prevalence — plot_topic_prevalence","text":"ggplot object representing bar plot topic prevalence.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_prevalence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize topic prevalence — plot_topic_prevalence","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Scrape reviews reviews <- scrape_reviews(temp_file, num_reviews = 10, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:16:42.348546 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 7.29123425483704 #> Total books processed: 3  # Model topics topic_results <- model_topics(reviews, num_topics = 2, num_terms = 5, english_only = TRUE) #> Topic 1:   #> fuck, hamlet, just, get, katniss  #>  #> Topic 2:   #> love, jane, book, time, one  #>   # Visualize topic distribution plot_topic_prevalence(topic_results)   # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize top terms for each topic — plot_topic_terms","title":"Visualize top terms for each topic — plot_topic_terms","text":"function creates bar plot top terms topic.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize top terms for each topic — plot_topic_terms","text":"","code":"plot_topic_terms(model_output, n = 10)"},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize top terms for each topic — plot_topic_terms","text":"model_output output model_topics function n number top terms visualize topic","code":""},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize top terms for each topic — plot_topic_terms","text":"ggplot object representing bar plot top terms topic.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/plot_topic_terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize top terms for each topic — plot_topic_terms","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Scrape reviews reviews <- scrape_reviews(temp_file, num_reviews = 10, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:16:51.708441 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 8.64831590652466 #> Total books processed: 3  # Model topics topic_results <- model_topics(reviews, num_topics = 2, num_terms = 5, english_only = TRUE) #> Topic 1:   #> fuck, hamlet, like, just, get  #>  #> Topic 2:   #> love, jane, book, read, time  #>   # Visualize top terms for each topic plot_topic_terms(topic_results, n = 5)   # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/preprocess_reviews.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess review text for topic modeling — preprocess_reviews","title":"Preprocess review text for topic modeling — preprocess_reviews","text":"function preprocesses review text optionally filtering non-English reviews, removing punctuation, converting lowercase, removing stopwords, stemming.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/preprocess_reviews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess review text for topic modeling — preprocess_reviews","text":"","code":"preprocess_reviews(reviews, english_only = TRUE)"},{"path":"http://liu-chao.site/Goodreader/reference/preprocess_reviews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess review text for topic modeling — preprocess_reviews","text":"reviews data frame containing scraped reviews english_only logical value indicating whether filter non-English reviews. Default TRUE","code":""},{"path":"http://liu-chao.site/Goodreader/reference/preprocess_reviews.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess review text for topic modeling — preprocess_reviews","text":"list containing following elements: corpus: preprocessed corpus object. dtm: document-term matrix. filtered_reviews: filtered reviews data frame.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/preprocess_reviews.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess review text for topic modeling — preprocess_reviews","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Scrape reviews reviews <- scrape_reviews(temp_file, num_reviews = 5, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:17:00.707278 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 8.23771452903748 #> Total books processed: 3  # Preprocess the reviews preprocessed <- preprocess_reviews(reviews, english_only = TRUE)  # Print the document-term matrix print(preprocessed$dtm) #> <<DocumentTermMatrix (documents: 13, terms: 1799)>> #> Non-/sparse entries: 2929/20458 #> Sparsity           : 87% #> Maximal term length: 73 #> Weighting          : term frequency (tf)  # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/replace_special_chars.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace special characters and remove non-ASCII characters — replace_special_chars","title":"Replace special characters and remove non-ASCII characters — replace_special_chars","text":"Replace special characters remove non-ASCII characters","code":""},{"path":"http://liu-chao.site/Goodreader/reference/replace_special_chars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace special characters and remove non-ASCII characters — replace_special_chars","text":"","code":"replace_special_chars(x)"},{"path":"http://liu-chao.site/Goodreader/reference/replace_special_chars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace special characters and remove non-ASCII characters — replace_special_chars","text":"x character vector","code":""},{"path":"http://liu-chao.site/Goodreader/reference/replace_special_chars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace special characters and remove non-ASCII characters — replace_special_chars","text":"character vector special characters replaced non-ASCII characters removed","code":""},{"path":"http://liu-chao.site/Goodreader/reference/scrape_books.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrape book details from Goodreads — scrape_books","title":"Scrape book details from Goodreads — scrape_books","text":"function scrapes details books using IDs Goodreads.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/scrape_books.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrape book details from Goodreads — scrape_books","text":"","code":"scrape_books(book_ids_path, use_parallel = FALSE, num_cores = 4)"},{"path":"http://liu-chao.site/Goodreader/reference/scrape_books.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrape book details from Goodreads — scrape_books","text":"book_ids_path Path text file containing book IDs. use_parallel Logical indicating whether scrape parallel (default FALSE). num_cores Number CPU cores use parallel scraping (default 4).","code":""},{"path":"http://liu-chao.site/Goodreader/reference/scrape_books.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrape book details from Goodreads — scrape_books","text":"data frame containing scraped book details.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/scrape_books.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scrape book details from Goodreads — scrape_books","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Run the function (with a small delay to avoid overwhelming the server) result <- scrape_books(temp_file, use_parallel = FALSE) print(head(result)) #> # A tibble: 3 × 13 #>   book_id book_title      book_details format publication_info authorlink author #>   <chr>   <chr>           <chr>        <chr>  <chr>            <chr>      <chr>  #> 1 1420    Hamlet          \"Among Shak… 289 p… First published… https://w… Willi… #> 2 2767052 The Hunger Gam… \"Could you … 374 p… First published… https://w… Suzan… #> 3 10210   Jane Eyre       \"Alternate … 532 p… First published… https://w… Charl… #> # ℹ 6 more variables: num_pages <chr>, genres <chr>, num_ratings <chr>, #> #   num_reviews <chr>, average_rating <chr>, rating_distribution <chr> # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/scrape_reviews.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrape book reviews from Goodreads — scrape_reviews","title":"Scrape book reviews from Goodreads — scrape_reviews","text":"function scrapes book reviews Goodreads based provided book IDs.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/scrape_reviews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrape book reviews from Goodreads — scrape_reviews","text":"","code":"scrape_reviews(   book_ids_path,   num_reviews = 30,   use_parallel = FALSE,   num_cores = 4 )"},{"path":"http://liu-chao.site/Goodreader/reference/scrape_reviews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrape book reviews from Goodreads — scrape_reviews","text":"book_ids_path character string specifying path file containing book IDs. num_reviews integer specifying number reviews scrape per book. Default 30. use_parallel logical value indicating whether use parallel processing. Default FALSE. num_cores integer specifying number cores use parallel processing. Default 4.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/scrape_reviews.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrape book reviews from Goodreads — scrape_reviews","text":"data frame containing scraped review information.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/scrape_reviews.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scrape book reviews from Goodreads — scrape_reviews","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file) # Run the function (with a small number of reviews to keep the example quick) reviews <- scrape_reviews(temp_file, num_reviews = 5, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:17:20.063063 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 8.58704137802124 #> Total books processed: 3 print(head(reviews)) #> # A tibble: 6 × 8 #>   book_id reviewer_id reviewer_name review_content            reviewer_followers #>   <chr>   <chr>       <chr>         <chr>                                  <dbl> #> 1 1420    91434473    daph pink ♡   \"if you don't ship Hamra…                  3 #> 2 1420    83582       Bill Kerwin   \"I don't have any earth-…                 NA #> 3 1420    44531801    Nayra.Hassan  \"متردد في قراءة هاملت..س…                  6 #> 4 1420    416390      Paul Bryant   \"The Skinhead Hamlet - S…                 11 #> 5 1420    10171516    jessica       \"shakespeare when pitchi…                 44 #> 6 2767052 3672777     Nataliya      \"Suzanne Collins has bal…                 14 #> # ℹ 3 more variables: reviewer_total_reviews <dbl>, review_date <chr>, #> #   review_rating <dbl> # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/search_goodreads.html","id":null,"dir":"Reference","previous_headings":"","what":"Search Goodreads — search_goodreads","title":"Search Goodreads — search_goodreads","text":"function searches books Goodreads.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/search_goodreads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search Goodreads — search_goodreads","text":"","code":"search_goodreads(   search_term,   search_in = c(\"title\", \"author\"),   num_books = 10,   sort_by = \"ratings\" )"},{"path":"http://liu-chao.site/Goodreader/reference/search_goodreads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search Goodreads — search_goodreads","text":"search_term search term string. search_in search (e.g., \"title\", \"author\"). num_books Number books return. sort_by sort results (e.g., \"ratings\", \"published_year\").","code":""},{"path":"http://liu-chao.site/Goodreader/reference/search_goodreads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search Goodreads — search_goodreads","text":"data frame search results.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/search_goodreads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search Goodreads — search_goodreads","text":"","code":"search_goodreads(\"parenting\", search_in = \"title\", num_books = 2) #>                                                                                       title #> 1            Bringing Up Bébé: One American Mother Discovers the Wisdom of French Parenting #> 2 Cribsheet: A Data-Driven Guide to Better, More Relaxed Parenting, from Birth to Preschool #>              author  book_id #> 1 Pamela Druckerman 13152287 #> 2       Emily Oster 40121328 #>                                                                                                                 url #> 1 https://www.goodreads.com/book/show/13152287-bringing-up-b-b?from_search=true&from_srp=true&qid=DX5ZWutaZo&rank=3 #> 2       https://www.goodreads.com/book/show/40121328-cribsheet?from_search=true&from_srp=true&qid=DX5ZWutaZo&rank=7 #>   ratings #> 1   70377 #> 2   33195"},{"path":"http://liu-chao.site/Goodreader/reference/sentiment_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a histogram of sentiment scores — sentiment_histogram","title":"Create a histogram of sentiment scores — sentiment_histogram","text":"function creates histogram sentiment scores reviews.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/sentiment_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a histogram of sentiment scores — sentiment_histogram","text":"","code":"sentiment_histogram(sentiment_df)"},{"path":"http://liu-chao.site/Goodreader/reference/sentiment_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a histogram of sentiment scores — sentiment_histogram","text":"sentiment_df data frame containing output analyze_sentiment.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/sentiment_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a histogram of sentiment scores — sentiment_histogram","text":"ggplot object representing histogram.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/sentiment_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a histogram of sentiment scores — sentiment_histogram","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Run the scrape_reviews function reviews <- scrape_reviews(temp_file, num_reviews = 10, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:17:29.357793 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 8.48607754707336 #> Total books processed: 3  # Check if reviews were successfully scraped if (nrow(reviews) > 0) {   # Perform sentiment analysis   sentiment_results <- analyze_sentiment(reviews, lexicon = \"afinn\")    # Create histogram of sentiment scores   sentiment_hist <- sentiment_histogram(sentiment_results)    # Display the plot   print(sentiment_hist)    # Optionally, save the plot   # ggsave(\"sentiment_hist.png\", sentiment_hist, width = 8, height = 6) } else {   cat(\"No reviews found. Cannot create sentiment histogram.\\n\") } #> Warning: Removed 6 rows containing non-finite outside the scale range (`stat_bin()`).   # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/sentiment_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sentiment trend over time — sentiment_trend","title":"Plot sentiment trend over time — sentiment_trend","text":"function plots average sentiment score time.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/sentiment_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sentiment trend over time — sentiment_trend","text":"","code":"sentiment_trend(sentiment_df, time_period = \"month\", show_smooth_trend = FALSE)"},{"path":"http://liu-chao.site/Goodreader/reference/sentiment_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sentiment trend over time — sentiment_trend","text":"sentiment_df data frame containing output analyze_sentiment. time_period string specifying time period grouping (\"day\", \"week\", \"month\", \"year\"). show_smooth_trend logical value indicating whether show overall smooth trend line (default: TRUE).","code":""},{"path":"http://liu-chao.site/Goodreader/reference/sentiment_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sentiment trend over time — sentiment_trend","text":"ggplot object representing sentiment trend.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/sentiment_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot sentiment trend over time — sentiment_trend","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Run the scrape_reviews function reviews <- scrape_reviews(temp_file, num_reviews = 10, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:17:37.174283 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 7.40587019920349 #> Total books processed: 3  # Check if reviews were successfully scraped if (nrow(reviews) > 0) {   # Perform sentiment analysis   sentiment_results <- analyze_sentiment(reviews, lexicon = \"afinn\")    # Create histogram of sentiment scores   senti_trend <- sentiment_trend(sentiment_results)    # Display the plot   print(senti_trend)    # Optionally, save the plot   # ggsave(\"senti_trend.png\", senti_trend, width = 8, height = 6) } else {   cat(\"No reviews found. Cannot create sentiment trend\\n\") } #> Warning: Removed 4 rows containing missing values or values outside the scale range #> (`geom_point()`).   # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/reference/top_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and print top terms for each topic — top_terms","title":"Extract and print top terms for each topic — top_terms","text":"function extracts top terms topic LDA model optionally prints .","code":""},{"path":"http://liu-chao.site/Goodreader/reference/top_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and print top terms for each topic — top_terms","text":"","code":"top_terms(lda_model, n = 10, verbose = TRUE)"},{"path":"http://liu-chao.site/Goodreader/reference/top_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and print top terms for each topic — top_terms","text":"lda_model LDA model n number top terms extract topic verbose Logical; TRUE, print top terms console (default TRUE)","code":""},{"path":"http://liu-chao.site/Goodreader/reference/top_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and print top terms for each topic — top_terms","text":"list character vectors, containing top terms topic.","code":""},{"path":"http://liu-chao.site/Goodreader/reference/top_terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and print top terms for each topic — top_terms","text":"","code":"# \\donttest{ # Create a temporary file with sample book IDs temp_file <- tempfile(fileext = \".txt\") writeLines(c(\"1420\", \"2767052\", \"10210\"), temp_file)  # Scrape reviews reviews <- scrape_reviews(temp_file, num_reviews = 5, use_parallel = FALSE) #> Total book IDs to process: 3 #> 2024-09-03 16:17:44.445879 scrape_goodreads_reviews: Completed! All book reviews extracted #> Scraping run time = 6.86547303199768 #> Total books processed: 3  # Preprocess the reviews preprocessed <- preprocess_reviews(reviews, english_only = TRUE)  # Fit LDA model lda_model <- fit_lda(preprocessed$dtm, k = 2)  # Print top terms top_terms(lda_model, n = 5) #> Topic 1:   #> love, jane, book, read, novel  #>  #> Topic 2:   #> fuck, hamlet, get, katniss, watch  #>  #> $Topic_1 #> [1] \"love\"  \"jane\"  \"book\"  \"read\"  \"novel\" #>  #> $Topic_2 #> [1] \"fuck\"    \"hamlet\"  \"get\"     \"katniss\" \"watch\"   #>   # Clean up: remove the temporary file file.remove(temp_file) #> [1] TRUE # }"},{"path":"http://liu-chao.site/Goodreader/news/index.html","id":"goodreader-010","dir":"Changelog","previous_headings":"","what":"Goodreader 0.1.0","title":"Goodreader 0.1.0","text":"CRAN release: 2024-08-27 Initial CRAN submission.","code":""}]
